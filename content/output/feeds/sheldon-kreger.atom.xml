<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Pelican Blog</title><link href="/" rel="alternate"></link><link href="/feeds/sheldon-kreger.atom.xml" rel="self"></link><id>/</id><updated>2016-09-05T21:15:00+00:00</updated><entry><title>I Am Burning My 20s Writing Code, and That's OK</title><link href="/i-am-burning-my-20s-writing-code-and-thats-ok.html" rel="alternate"></link><updated>2016-09-05T21:15:00+00:00</updated><author><name>Sheldon Kreger</name></author><id>tag:,2016-09-05:i-am-burning-my-20s-writing-code-and-thats-ok.html</id><summary type="html">&lt;p&gt;Working as a software engineer is more mentally demanding than anything I have ever done. The amount of focus I have trained myself to gather each day is far beyond what I thought was possible.&lt;/p&gt;
&lt;p&gt;I have been pushing much harder than before, in my new job. I have only been to a handful of piano lessons; to the paintball field once; and a few hours per week on the drums; I haven't spent time with anybody my age aside from Tina. I have been at the gym regularly, otherwise I would probably lose my mind!&lt;/p&gt;
&lt;p&gt;Tonight I bailed out on &lt;em&gt;yet another&lt;/em&gt; piano lesson, skipped the drum set, skipped the gym, and I've been writing code since 7am. All this just to work on a presentation and hopefully give a good first impression of my coworkers later this week.&lt;/p&gt;
&lt;p&gt;What scares me about this is that I don't see any end to it. Despite all this time I spent today, I don't feel like I got much done. The learning curves are steep, and I look in every direction and see more, more, more of them. I see projects with huge potential. I see opportunities to work with amazing people.&lt;/p&gt;
&lt;p&gt;It's funny how I originally planned to burn my 20s in medical school, but now I'm burning it in the software industry. Most people do this just to secure a paycheck to support their family. That is certianly noble in a certain way, but I am unsatisfied with this fate. If that's all I wanted to accomplish, I'd find a less demanding career and spend more time outside work. &lt;/p&gt;
&lt;p&gt;When I start feeling overwhelmed like I do tonight, I remind myself: My work will one day allow me to have a much greater impact than I ever would have as a doctor. Software is the backbone of the technology that will shape new treatments of disease, projects to rebuild the ecosystem, and the elimination of scarcity. I listen to elderly scholars and engineers and realize how much time they were able to spend in their work, and how much things changed over their lifetimes. This is what inspires me to push through, to hold strong against the shallow forms of entertainment which has swallowed many of my peers.&lt;/p&gt;
&lt;p&gt;Thinking about what kinds of projects will have true impact has forced me to re-interrogate my own values in a much deeper manner. I have returned to the intellectuals who influenced my thinking in college, and I have tried to expand outward. Although I do not know what I will be working on even six months from now, I know that I am putting in all the effort I can to contribute to the projects of my choice, when they arise. This is the form of freedom I value more than the freedom to watch movies, to take vacations, to booze up and smoke weed. Facing your true identity is both a form of liberation and enslavement, for the consequences of rejecting it are too great.&lt;/p&gt;</summary><category term="Programming"></category><category term="Career"></category></entry><entry><title>Engineers are Morally Obligated to Pursue Radical Technologies</title><link href="/engineers-are-morally-obligated-to-pursue-radical-technologies.html" rel="alternate"></link><updated>2016-05-05T12:00:00+00:00</updated><author><name>Sheldon Kreger</name></author><id>tag:,2016-05-05:engineers-are-morally-obligated-to-pursue-radical-technologies.html</id><summary type="html">&lt;p&gt;Capitalism in the 21st century is premised upon limitless growth. It assumes that we can continue to expand our consumption indefinitely. Everywhere we look, we see more and more natural resources being utilized for human needs. In fact, the faster we drain the environment, the better off the economy is.&lt;/p&gt;
&lt;p&gt;There are only two ways this can end. First, a combination of environmental and economic catastrophe, on a scale which we have never witnessed. Second, there could be a series of major breakthroughs in science and engineering which allow us to create resources for humans without destroying the ecosystem. I prefer to contemplate option two.&lt;/p&gt;
&lt;p&gt;In his book "Radical Abundance: How a Revolution in Nanotechnology Will Change Civilization", K. Eric Drexler explains one of the most promising technologies which humans may soon leverage to sustain growth in consumption, but slow our draining of natural resources. By constructing materials at the molecular level, and piecing goods together from atomic building blocks, new items from human consumption can be created, practically from thin air. Rather than chopping down trees for rubber and mining mountains for metals, cars could be built from the ground up using nano-scale materials (such as carbon and hydrogen), put together into increasingly large components through automated machinery. Drexler poses the possibility of creating such a car with open source blueprints, inexpensive and publicly accessible machinery, and raw materials costing less than a few hundred dollars.&lt;/p&gt;
&lt;p&gt;While such a radically different world may seem far-fetched, look back upon the Internet Revolution, which happened in a period of about 20 years. This technological breakthrough fundamentally and irreversibly altered the way people interact in both social and economic contexts. The global economy is now dependent upon the internet to function (and I am dependent upon it for a job). Such a radical change was not foreseen by the general public, otherwise we would have all invested in Apple and Google!&lt;/p&gt;
&lt;p&gt;But, we need not look into the future to see how technology is being used to reverse the damages humans have caused.&lt;/p&gt;
&lt;p&gt;There is a sharp contrast in the news and media I find online. On the one hand, I read reports of environmental destruction with no signs of stopping. On the other, I see videos of tools which are used to clean plastic out of sea water, remove toxins and carbon from the atmosphere, improve the quality of soil, reduce water consumption, and so on.&lt;/p&gt;
&lt;p&gt;Imagine, rather than re-working each model of smart phone, car, camera, and PC each year, that companies instead employed engineers to create technologies to rebuild the ecosystem, to remove carbon from the atmosphere, to restore the rainforests, to remove trash from oceans, and so on. Furthermore, imagine they were given the chance to focus on creating products which were created with negligible costs, both ecologically and environmentally.&lt;/p&gt;
&lt;p&gt;Given the magnitude of human consumption, no ideological approach stands a chance. Asking consumers to avoid consumption of meat and dairy, to recycle aluminum cans, to conserve water, to carpool, and so on, is a pathetic way for us to feel like we're having an impact, when in reality things are getting worse faster than we want to admit (Lacan calls this "fetishistic disavowal"). While such efforts, from one perspective, are noble, the reality is that they are extremely inadequate in context of the problems ahead.&lt;/p&gt;
&lt;p&gt;This is why engineers are morally obligated to give back. We are the only people who truly have the capability to thwart the looming economic and environmental ruin. Absent a radical transformation of the way goods are produced and distributed across the entire globe, human society faces an inevitable collapse under the pressure of limitless consumption on our naturally limited planet.&lt;/p&gt;
&lt;p&gt;Rather than distracting ourselves with the endless, surface-level concerns of day-to-day living, artificial spiritual gratification, and shallow methods of entertainment, we must instead step back and embrace the bigger picture. Our minds are the only tool we have which can pave a new path forward for the species of this planet.&lt;/p&gt;</summary><category term="Environment"></category><category term="Ethics"></category><category term="Future"></category><category term="Vegan"></category></entry><entry><title>I Am Retiring from CMS Projects</title><link href="/i-am-retiring-from-cms-projects.html" rel="alternate"></link><updated>2016-03-13T12:00:00+00:00</updated><author><name>Sheldon Kreger</name></author><id>tag:,2016-03-13:i-am-retiring-from-cms-projects.html</id><summary type="html">&lt;p&gt;After 5 years, I have decided to leave Drupal behind to take my software engineering career in a different direction. In fact, this was the plan, even before I began working in Drupal.
My gratitude to the Drupal community cannot be overstated. A handful of key, unnamed people in this high demand industry helped me very early on. Many people don't realize this, but without their help, I likely would have ended up bankrupt and homeless back in 2011, after being ruthlessly rejected from the US university system for no good reason.&lt;/p&gt;
&lt;p&gt;This support only grew as time passed. The team at OpenSourcery pushed my skill set to the next level by providing challenging work each day. Later, the team at Intel provided me with even more challenging problems on the largest project I've ever worked on.&lt;/p&gt;
&lt;p&gt;Although the community has been outstanding, I find content management systems to be a pretty boring problem space. Technically, an modern CMS is very challenging, but theoretically they are all very simple. My new job brings me back into the area I aimed for as a college student. I never stopped studying independently, and I always knew that my persistence would force things to eventually circle back around.
Despite this, leaving has left me with mixed emotions, simply because of the amazing people I've met and worked with. Only time will tell if I jump back into CMS work, but I'm looking forward to facing a different flavor of hellish problems in this major career shift.&lt;/p&gt;</summary><category term="Programming"></category><category term="Drupal"></category><category term="Career"></category></entry><entry><title>Understanding Config in Elixir</title><link href="/understanding-config-in-elixir.html" rel="alternate"></link><updated>2016-02-28T12:00:00+00:00</updated><author><name>Sheldon Kreger</name></author><id>tag:,2016-02-28:understanding-config-in-elixir.html</id><summary type="html">&lt;p&gt;Elixir uses a build tool called Mix, which allows you to define static global variables for your project inside a special file called &lt;code&gt;config.exs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A typical &lt;code&gt;config.exs&lt;/code&gt; file looks something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Mix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;Config&lt;/span&gt;

&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="nv"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nn"&gt;myVar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nn"&gt;myVar2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inside your application, we then load the variables using a function called &lt;a href="http://elixir-lang.org/docs/stable/elixir/Application.html#get_env/3"&gt;&lt;code&gt;Application.get_env()/3&lt;/code&gt;.&lt;/a&gt; This allows us to access the static variables as we desire.&lt;/p&gt;
&lt;p&gt;I recently started using Ecto, which uses such configuration to define connection parameters to the database. However, since I already had configuration for some variables inside my application, I was a bit confused about how to properly add the parameters for Ecto. Do I place it all inside the MyApp config? Do I place it inside a new config called &lt;code&gt;EctoConfig&lt;/code&gt;? Tough to say.&lt;/p&gt;
&lt;p&gt;Under the hood, &lt;code&gt;config&lt;/code&gt; is actually just a key/value list. You may define multiple &lt;code&gt;configs&lt;/code&gt;, but they are stored as a list of lists, one list for each key you define. For each key, you have another key/value list, which is the actual variables. An example will make this clear.&lt;/p&gt;
&lt;p&gt;Let's assume I have an application called :status_app. I have a file called &lt;code&gt;repo.ex&lt;/code&gt; which contains a module where I set up my Ecto repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;defmodule&lt;/span&gt; &lt;span class="nv"&gt;StatusApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;Repo&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Ecto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;Repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;otp_app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;status_app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Ecto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;Adapters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;Postgres&lt;/span&gt;

  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;ecto://postgres:postgres@localhost/sn&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I also have a &lt;code&gt;config.exs&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;status_app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nn"&gt;sites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sheldonkreger.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;prodrumblog.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nn"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;

&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;status_app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;StatusApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;Repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nn"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Ecto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;Adapters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;Postgres&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nn"&gt;database&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;sn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nn"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;postgres&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nn"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;postgres&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nn"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;status_app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nn"&gt;fooVar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fooVal&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I like to think of &lt;code&gt;:status_app&lt;/code&gt; as the top-level identifier for the &lt;code&gt;config&lt;/code&gt;, and each additional &lt;code&gt;config&lt;/code&gt; declaration as a separate namespace inside it. In this case, StatusApp.Repo is a module in my project.&lt;/p&gt;
&lt;p&gt;The easiest way to see what this actually looks like is to use &lt;a href="http://elixir-lang.org/docs/stable/elixir/Application.html#get_all_env/1"&gt;&lt;code&gt;Application.get_all_env(:status_app)&lt;/code&gt;:&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IO.inspect(Application.get_all_env(:status_app))&lt;/code&gt; returns:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[{StatusApp.Repo,
  [adapter: Ecto.Adapters.Postgres, database: &amp;quot;sn&amp;quot;, username: &amp;quot;postgres&amp;quot;,
   password: &amp;quot;postgres&amp;quot;, hostname: &amp;quot;localhost&amp;quot;]}, {Foo, [foo: &amp;quot;fooVal&amp;quot;]},
 {:sites, [&amp;quot;sheldonkreger.com&amp;quot;, &amp;quot;prodrumblog.com&amp;quot;]}, {:interval, 2000}]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I can access these variables using the key/value pair as an argument to &lt;a href="http://elixir-lang.org/docs/stable/elixir/Application.html#get_env/3"&gt;&lt;code&gt;Application.get_env()/3&lt;/code&gt;:&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IO.inspect(Application.get_env(:status_app, :sites))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;returns:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;["sheldonkreger.com", "prodrumblog.com"]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We can give it just two arguments because it will default to the top-level list when we don't specify the &lt;code&gt;key&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To drill down to &lt;code&gt;Foo&lt;/code&gt;, we use &lt;a href="http://elixir-lang.org/docs/stable/elixir/Application.html#get_env/3"&gt;&lt;code&gt;Application.get_env()/3&lt;/code&gt;:&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IO.inspect(Application.get_env(StatusApp, Foo, :fooVar)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Which returns:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[fooVar: "fooVal"]&lt;/code&gt;&lt;/p&gt;</summary><category term="Programming"></category><category term="Elixir"></category></entry><entry><title>The Node.js Event Loop is a Damn Mess</title><link href="/the-nodejs-event-loop-is-a-damn-mess.html" rel="alternate"></link><updated>2016-02-18T11:00:00+00:00</updated><author><name>Sheldon Kreger</name></author><id>tag:,2016-02-18:the-nodejs-event-loop-is-a-damn-mess.html</id><summary type="html">&lt;h3&gt;There Is No Perfect Software&lt;/h3&gt;
&lt;p&gt;I must start this article by reminding everybody of my endless frustration with software engineering in general. Frustrations like those I describe below are the rule rather than the exception. Anybody familiar with my obsession with &lt;a href="http://personality-development.org/theories-personality-development/jacques-lacan"&gt;Lacanian psychoanalysis&lt;/a&gt; understands why I don't believe in a perfect software system. This is a topic I will expand upon another day.&lt;/p&gt;
&lt;p&gt;For now, just keep in mind that I take no personal offense to these kinds of problems and I don't necessarily believe Node.js is any better/worse than anything else out there, generally speaking. Each tool we use as programmers will come with its own set of quirks and challenges; my aim here is to simply point out those I ran into with Node.js this year. Great thinkers like Lacan and Badiou have shown us that the very nature of subjectivity stands in direct opposition to our desire to create orderly systems using conscious rationality.&lt;/p&gt;
&lt;p&gt;That being said, programming languages are usually pretty good at what they are known and advertised for. My impression of Node.js, early on, was that it was optimal for handling asynchronous operations. What I discovered this year (mostly 2015) was that the features I felt I needed to cleanly handle multiple asynchronous tasks do not work well. Unlike other tools, where the more experience I gained, the more productivity I achieved - the more I used Node, the more shortcomings I ran into.&lt;/p&gt;
&lt;p&gt;Rather than an inflammatory rant, I'm hoping these lessons help others make informed decisions when they evaluate Node.js.&lt;/p&gt;
&lt;h3&gt;The Ugly Soul of Node.js&lt;/h3&gt;
&lt;p&gt;The Node.js syntax itself basically forces you to utilize asynchronous callbacks. The basic idea is you instruct Node to perform some task (executing a function), take the return value for from this function, and use it as an argument to the next set of instructions in your program (another function). For example, I need to fetch a username from the database, and then pass it along to be rendered in a template file. Meanwhile, my app can continue running and grab things I need to deliver my request, like images from the file system, execute permission validation, etc. This pattern is the very soul of Node.js applications.&lt;/p&gt;
&lt;p&gt;Perhaps my first disappointment with Node.js was the notorious "callback hell." I will not explain this issue here because it is covered millions of times on other blogs. I was initially surprised that people were willing to overlook this like it's no big deal. Now, this reality leaves me downright disturbed.&lt;/p&gt;
&lt;p&gt;Apparently, this issue is too big to tackle in Node.js core, so the de-facto solution for covering it up is to use an external package to 'promisify' your code. Again, I'm not going to cover how this is done, simply look up a &lt;a href="http://bluebirdjs.com/docs/why-promises.html"&gt;tutorial on Bluebird&lt;/a&gt; and you'll get the idea.&lt;/p&gt;
&lt;p&gt;At this point, you have been forced to alter the syntax of all your own callbacks, and forcibly apply this custom syntax to every NPM package you wish to use asynchronously. Let me me add that sometime this 'promisificaiton' doesn't work on even very popular NPM packages, for example, the most popular MySQL interface. (Perhaps this issue has been solved, but when I wrote my app, it was not).&lt;/p&gt;
&lt;p&gt;Blog posts describing promisification treat it like some kind of miracle. &lt;a href="https://spion.github.io/posts/why-i-am-switching-to-promises.html"&gt;"Wow, look at how much cleaner this syntax is! It's easier to read! That means my code is better!"&lt;/a&gt; Nothing could be further from the truth.&lt;/p&gt;
&lt;p&gt;Assuming you are feeling OK about all this (or feeling too committed to turn back), all you have done is mask the REAL problem.&lt;/p&gt;
&lt;h3&gt;Feeling Good About Ignoring the Real Problem&lt;/h3&gt;
&lt;p&gt;After becoming reliant on Bluebird, introducing complex jargon, and reworking your syntax, it's easy to feel like you've accomplished something great. After all, you learned so much!&lt;/p&gt;
&lt;p&gt;The truth, however, is that the flow of your application's logic has remained almost identical as before. Nesting asynchronous callbacks is a dangerous game to play, and many don't realize it. Let me explain.&lt;/p&gt;
&lt;p&gt;Let's say that you've built a web app with a reasonable amount of database I/O - fetching users, fetching content, validating account credentials, and so on. This is not rocket science.&lt;/p&gt;
&lt;p&gt;In this app, you chose to wrap all of your database in functions, which you then call asynchronously at runtime. For each page request your app receives, you make several independent database calls, all of which need to finish before delivering the payload back to the web browser. You are clever, and have written all of these DB calls to be non-blocking and independent of one another, so your app can do a bunch of other work while I/O takes place. Hell, you might even write unit tests and make sure your return values are valid.&lt;/p&gt;
&lt;p&gt;This sounds great, right? I mean, you've done pretty well with all that jargon, unit testing, and asynchronous implementation.&lt;/p&gt;
&lt;p&gt;One day, your app receives an unusual amount of traffic, and many pages are requested at the same time. Node.js responds by invoking a whole bunch of functions, I/O on the database. How many? NOBODY ACTUALLY KNOWS. And this is the first (of many) REAL problems that you didn't actually solve.&lt;/p&gt;
&lt;p&gt;Node.js will actually just keep issuing function calls until the call stack size is exceeded and your app falls over dead, like an overdose of Adderall. If something goes wrong inside one of your functions and the callback is never executed, guess what? Node will let the zombie process hang around for an unknown amount of time, and meanwhile, it will keep issuing new calls to the same function. In our example app, let's just imagine the DB becomes overwhelmed and stops responding. Modern DBs know that this can happen, and will block incoming requests when they are overloaded. Best case scenario, your DB starts responding again, and the end user's browser times out while trying to load your web page. Much more likely, however, your Node app keeps trying to hit the DB in an unrestrained manner, the call stack fills, and your app crashes completely. Now nobody visiting your site is getting anything.&lt;/p&gt;
&lt;p&gt;To "fix" this, you get to set timeouts on your callbacks to ensure if something goes wrong, they return. If you know that callback is going to be slow (for example, making an HTTP request to get some data from another server), then you're stuck defining a long timeout value, and again, Node will just keep hammering your function, and you'll end up filling the call stack despite applying your timeout bandage.&lt;/p&gt;
&lt;p&gt;The final issue I want to mention here is that your app will most likely have functions which occasionally return a value that you don't expect. Since there is no type safety, Node.js just takes whatever the hell your return value happens to be, then passes it along to the callback like it's no big deal.&lt;/p&gt;
&lt;p&gt;I hope you like writing conditional logic inside your functions to ensure that the arguments passed to them is valid. All those try/catch or throw/catch statements will look SUPER SEXY inside your clean, promisified callbacks. I also hope you like writing unit tests to ensure that you deal with every possibility. Because guess what? These efforts are your only mechanism of defense.&lt;/p&gt;
&lt;h3&gt;Confronting the Real Problem: The Event Loop&lt;/h3&gt;
&lt;p&gt;Notice how any uncaught fatal error in a Node.js app will cause it to completely crash? There is a simple reason for this: The event loop.&lt;/p&gt;
&lt;p&gt;Imagine you are hosting a party where everybody brings their own beer. But, rather than serving it in individual bottles, you pour it all into one giant punch bowl, and everybody dips their cup into it to get their serving. This is obviously a terrible idea, because the flavor of the beer is mixed and mismatched (at best) and if one beer is contaminated, everybody goes home sick (at worst).&lt;/p&gt;
&lt;p&gt;Following this analogy, the functions in your application are the bottles of beer, and the event loop is your punch bowl. The end users, your managers, and your clients are your unfortunate guests.&lt;/p&gt;
&lt;p&gt;Each time a function returns a value and passes it to a callback, Node.js places that callback in a queue to be executed. When? Nobody knows. In fact, you have absolutely no control over when any of your callbacks are executed, aside from the &lt;code&gt;setImmediate()&lt;/code&gt; and &lt;code&gt;nextTick()&lt;/code&gt; wrappers, which are supposed to push a callback to the top of the execution queue, to be processed in a prioritized manner (speaking from experience, this does not work as expected). Like the punchbowl full of beer, this 'single-threaded' model doesn't make any damn sense, because if just one callback goes wrong, the whole application crashes.&lt;/p&gt;
&lt;p&gt;Even if you use utmost caution in your application, when you start interfacing with other software systems, you have no idea what kind of beer these friends are going to bring to your party.&lt;/p&gt;
&lt;p&gt;Although the execution of the app is synchronous, even PHP keeps each request in its own thread, so that when one request fails, the others remain unaffected. Today, is extremely abnormal to mix all your beer in one punchbowl. There plenty of other options for mature languages which give you various levels of control and combine async + independent request handling. This isn't rocket science.&lt;/p&gt;
&lt;p&gt;While I'm on the topic of the event loop, I want to mention how functions are handled while in-flight, as they are running and have not yet returned. V8 itself is written in C++, and it does its best to manage all of these pending functions while the event loop continuously churns through the execution queue. Exceeding the stack size is so common because there is no good way for the programmer to slow down the influx of operations from the execution queue while all these unreturned function calls are performing work.&lt;/p&gt;
&lt;h3&gt;Trying to Plug the Hose&lt;/h3&gt;
&lt;p&gt;Facing this problem in my own application, I decided to try &lt;a href="https://github.com/caolan/async#queue"&gt;asynchronous queues.&lt;/a&gt; This important tool is surprisingly unknown in the Node.js community, and it took me quite awhile to find, even asking around in IRC, Googling, StackOverflow, etc.&lt;/p&gt;
&lt;p&gt;Async queues give you a way to plug the hose on any one of your functions. The basic idea is instead of directly calling a callback, a function will instead pass the callback along to a middle manager (the queue), and the queue will pool all the pending requests to the function. Each time the function processes the invocation and returns a value, the queue is notified and it draws from its pool to execute the next pending function request.&lt;/p&gt;
&lt;p&gt;But, what happens if you pass too many requests to your async queue? Bingo! Stack size exceeded and/or memory full. Again, these pending operations are just kind of hanging out inside the call stack and/or task queue. It's like everybody is waiting to get some beer from the punch bowl, until finally there are so many people in line that the very floor of your house collapses.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Based on the arguments outlined above, I believe JavaScript is usually not a good choice for server side applications. Although I had this 'gut feeling' from day one, I had the opportunity to dive into some Node.js projects professionally, and had a lot of fun doing so.&lt;/p&gt;
&lt;p&gt;Given Node's impressive popularity, I am surprised that I have yet to see anybody talk seriously about these problems in detail. Given that Node.js is fully intended and advertised to handle async operations, I these fundamental problems to be pretty disturbing. However, I have learned A LOT about the kinds of challenges these kinds of applications run into, and have developed a much deeper appreciation for alternative technologies in the process.&lt;/p&gt;
&lt;p&gt;I'd like to think that instead of writing angsty blog posts, they are writing code for projects like Async and Bluebird to try to handle some of these issues. What I suspect, however, is that most Node.js developers are instead writing applications without taking these issues into consideration, and hopefully learning the hard way, one bug at a time. Frankly, I don't blame them; after all, it was only after taking the time to try this myself that I realized just how deeply rooted these problems really are.&lt;/p&gt;</summary><category term="Programming"></category><category term="Node.js"></category><category term="Asynchronous Computing"></category></entry><entry><title>What Vegans Can Teach Us About Morality</title><link href="/what-vegans-can-teach-us-about-morality.html" rel="alternate"></link><updated>2016-01-18T14:00:00+00:00</updated><author><name>Sheldon Kreger</name></author><id>tag:,2016-01-18:what-vegans-can-teach-us-about-morality.html</id><summary type="html">&lt;p&gt;This post is not about whether or not eating animal products is ethical. This information is relevant to you know matter what you think about eating animals. It's about the complex role of the individual and our expression of personal values in today's society, and why truly dedicated morality is so rare today.&lt;/p&gt;
&lt;p&gt;Now more than ever, people face dramatic political turmoil and feel disempowered. Unless you are a politician or business person with far reaching power, it seems as though your opinions hold no real weight. With this in mind, is it worth the effort to engage ourselves in politics? When discussing this question, I like to refer to vegans as an example, because vegans embody several traits which I believe distinguish them in terms of true, effective dedication to their beliefs.&lt;/p&gt;
&lt;h3&gt;Ethical Decision Making is Complicated&lt;/h3&gt;
&lt;p&gt;Anybody who has taken a philosophy course is familiar with the challenges of ethics. I'm no expert, so I'm not going to dive into this in a nuanced manner. But, I'd like to explore things with our vegan friends. Let's dive quickly into some of the common reasons why a vegan chooses their diet.&lt;/p&gt;
&lt;p&gt;But first, let's take a tangent to the topic of health. Health is an often-cited reason for a vegan diet. But, even this more simple question is quite complex: What is health? How do you measure it? Can you easily weigh the countless factors which contribute to health, and associate the vegan lifestyle with them? Although these questions take a lot of time and energy to answer, vegans take this challenge head-on, not only for their own wellbeing, but also to refute people who argue against them.&lt;/p&gt;
&lt;p&gt;Health aside, vegans also cite the poor treatment of animals, and/or an absolute ethical obligation to avoid exploiting them altogether. Is it OK to eat eggs, if the animal wasn't fertile? What if a cow is raised in a loving manner? What about hunting for sport, is that wrong? Didn't cave men eat animals?&lt;/p&gt;
&lt;p&gt;To each of these questions, the witty vegan has an answer. Whether or not they are right is not my point. My point is that vegans have a systematic, often evidence-based approach to discussing their beliefs. When facing an argument, they are armed and ready to stand up.&lt;/p&gt;
&lt;h3&gt;Vegans Dodge the 'False Choices' of Modern Capitalism&lt;/h3&gt;
&lt;p&gt;Although vegans have countless individual motivations for embracing their diet, it is most often associated with an ethical obligation toward animals. Many vegans believe that consuming animal products is unethical for a variety of reasons. This is where things start to become hazy.&lt;/p&gt;
&lt;p&gt;Using a simplified debate as an example, let's say we have a vegan who believes that consuming animal products is wrong, due to the industrial manufacturing of such products - enslaving animals for their lifespan, inhumane conditions, terrifying slaughtering, and so on. For these reasons, they avoid all animal products, to be sure that they are making optimally ethical choices. On the other hand, we have a vegetarian who agrees with the wrongdoing of the animal product industry. However, they believe that they can still ethically consume animal products like eggs and milk, but only if they are careful about selecting the right products - perhaps from local farms who claim to treat the animals well.&lt;/p&gt;
&lt;p&gt;In this debate, the vegan has a clear target of attack; what I refer to as 'the rise of false choices.' I first started thinking about this after reading Slavoj Zizek rant about a product called Ethos, which is bottled water sold at Starbucks. For each bottle of water, a percentage of the profits are donated to bring clean water where people are struggling. Zizek explains that large corporations have recently learned to cater to our supposed morality, by offering us products which might have some troublesome ramifications, but that have the 'solution' built in. Ethos bottled water is a great example: When I buy Ethos, I feel some joy in knowing I helped an African village dig a well; in the meantime, Starbucks expands its corporate empire with my money, and my bottle is added to the pile of innumerable plastic bottles polluting the ecosystem.&lt;/p&gt;
&lt;p&gt;A vegan does not fall for this kind of trickery. A mere vegetarian can be easily duped into purchasing 'cage free' eggs which most often come from awful, crowded feed pens, and which pay no respect to the lives of baby male chickens, or to the life of the females after they finish their ovulation and become unprofitable. By abstaining completely from animal products, they can be substantially more confident about how their actions impact the lives of animals. By short-circuiting the 'false choices' grocery stores offer to us, vegans take a more effective stance.&lt;/p&gt;
&lt;p&gt;However, such a stance is not easy, which brings me to my next point.&lt;/p&gt;
&lt;h3&gt;Being a Vegan is Not Easy - But They Do it Anyway&lt;/h3&gt;
&lt;p&gt;If you've ever known a vegan, you know the kinds of struggles they face. Eating food - which we have to do several times a day - is a relatively effortless task for most people. As a vegan, you are suddenly faced with challenge each and every time you try to find food. Checking labels, searching menus for creative options, and settling for food that often doesn't taste as good . . . this is the life of a vegan.&lt;/p&gt;
&lt;p&gt;One of the toughest things is telling friends and family about your diet. Often, you have to turn down food your family or friends prepare. You are usually interrogated like some kind of terrorist for several minutes. After that, you get a list of jokes about vegans (which are the same every time). Finally, somebody will inevitably start an argument about your health. Again and again, and again . . . this is the life of a vegan.&lt;/p&gt;
&lt;p&gt;Compound this with the complexity of managing your nutrition as a vegan, dealing with high food prices, and often facing the craving for meat, and all of this happening around the clock . . . you're looking at a pretty demanding lifestyle choice.&lt;/p&gt;
&lt;p&gt;All of this, while firmly grasping the true reality: That no matter whether or not I eat meat, the industry will still exist, the tragedy will still continue. How much of an impact do my choices have? It's impossible to know. For a vegan, any chance that they can help another being avoid suffering is enough to motivate them against all the challenges they face.&lt;/p&gt;
&lt;p&gt;Recently, professional bodybuilder Marc Lobliner published &lt;a href="https://www.youtube.com/watch?v=jd7OfgtS1cU&amp;amp;ab_channel=TheTigerFitness"&gt;a video called "What Vegans Can Teach Us About Making Gains."&lt;/a&gt; I was extremely impressed with Lobliner's discussion. Rather than attacking vegans (like most strength athletes do), he explains why people really ought to be looking up to them. Lobliner continues to discuss the daily struggles vegan bodybuilders face. Facing non-vegan food, day in and day out, and ALWAYS turning it down, is a challenge which is not to be underestimated. Accomplished bodybuilders like Marc (who isn't a vegan) know this feeling just as well. Bodybuilders, like vegans, have extremely organized diets which allow little room for mistake. It's rough. And yet, for the sake of their morality (or in Marc's case, athletic performance), these people do it anyway.&lt;/p&gt;
&lt;p&gt;In contrast, many Americans don't register to vote. They struggle to get out of bed and make it to work on time, even with the help of cars which often operate over 65 miles per hour. Many of them suffer health consequences due to a lazy lifestyle and a long-term decision to avoid rigorous exercise. Many Americans don't even have the self control to eat a reasonable amount of healthy food. A quick search on Wikipedia leads me to believe that an average American reads at a 7th to 8th grade level. It's no wonder these people rely on others to dictate their beliefs down to them.&lt;/p&gt;
&lt;p&gt;Who can blame them? In a society where work is mundane, time is expensive, and everybody is bombarding each other with deception in a conquest for profit . . . can we be expected to regularly interrogate our beliefs, adjust our lifestyles, and take action? I honestly don't it's realistic to think that most people can do this. But, vegans do it anyway.&lt;/p&gt;
&lt;p&gt;While most people are busy sharing memes on Facebook, vegans are planning their next meal. They are signing petitions. They are talking to their friends and answering questions. They are doing research on nutrition. They are looking into where their food was grown, and how it was delivered. They are holding back the urge to punch your teeth out when you tell the joke about the vegan Crossfitter (personally, I sometimes think they should just clock you). And yes, they are also sharing memes on Facebook.&lt;/p&gt;
&lt;h3&gt;Extremists are Imperfect, But Better than Pushovers&lt;/h3&gt;
&lt;p&gt;As Marc mentions in his video, when most people go on a diet, they may be successful for a few months. But, all too often, they go back to their habitual way of eating and therefore face long term failure. Vegans, on the other hand, are so inspired by their beliefs that the temptations of food become meaningless. It's the lifestyle they've created; it's the habits they follow; it's the day-to-day decisions they make which allow them to continue forward.&lt;/p&gt;
&lt;p&gt;Even the most diligent weight-loss dieter will cave at least sometimes to the urge to cheat. This is because they lack true motivation. They lack motivation because they don't experience any underlying moral urgency which dissuades them from guzzling a milkshake. Vegans on the other hand, everything is at stake each time they see a steak . . . pun intended.&lt;/p&gt;
&lt;p&gt;My coach Nick told me a great analogy in this regard. Find a smoker struggling to quit. Most of the time, they will start smoking again. Take one of these people and put them in an extreme situation: stop smoking, or your mother is going to be tortured and killed. Suddenly, the game changes.&lt;/p&gt;
&lt;p&gt;It is only by raising the lives of animals to such high importance that they are able to take their own diet seriously. Without an extreme ethical obligation, extreme action never gains momentum and moves forward. (Fun fact, the only vegan I've seen cheat was a vegan for health reasons).&lt;/p&gt;
&lt;p&gt;The best athletes I've worked with aren't the people who go to the gym to stay healthy. They are the ones whose very identity is tied to their success in sport. A failure in competition represents a failure in themselves, in their entire lives. This is what gives them the drive to train harder than others and push their performance to elite levels.&lt;/p&gt;
&lt;p&gt;People need radical motivations to take radical action. The 9/11/2001 attacks were certainly extreme, and this created justification for extreme action and radical political changes. For better or worse, extreme moral tragedy seems to be the motivating factor for most political change.&lt;/p&gt;
&lt;h3&gt;Becoming a Radical&lt;/h3&gt;
&lt;p&gt;My argument here is simple. If we want extreme political change (which is desperately needed today), we need to solidify the motivations for action. The challenges of terrorism, ecological disaster, and economic catastrophe have remained, for most of us, abstract concepts. Although this may make us feel uneasy, such a weak emotion is not powerful enough to force us to make the necessary, dramatic changes to our lifestyles. Modern capitalism and politicians across the globe want us to believe that we can buy our way out of this, that we can vote our way out of these problems. This is untrue. Radicals today should focus on creating propaganda which demonstrates the urgency of global crisis in a tangible manner. By appealing to deeply seated emotions, radicals can inspire action by framing global problems as a moral problem. Our planet is filled with catastrophe, and there is absolutely no need to create any more, despite what terrorist organizations might believe.&lt;/p&gt;
&lt;p&gt;What does this really mean, in a practical sense? Stop being afraid to express your concerns. Take the time to develop a deep understanding of global problems and how they can be resolved. Be prepared to use this knowledge in an argument. Don't be intimidated by people who disagree with you. Instead, make it a point to talk to them, understand their moral framework, and try to show how your solutions are more relevant, even within their own belief systems. In short, treat your political views like a vegan treats their food.&lt;/p&gt;</summary><category term="Vegan"></category><category term="Politics"></category><category term="Zizek"></category></entry><entry><title>Natural Talent and Programming</title><link href="/natural-talent-and-programming.html" rel="alternate"></link><updated>2015-11-15T21:15:00+00:00</updated><author><name>Sheldon Kreger</name></author><id>tag:,2015-11-15:natural-talent-and-programming.html</id><summary type="html">&lt;p&gt;Recently, I attended a Meetup where one of the guests brought up an interesting question. She remarked about how programmers can accomplish a lot, sometimes with less knowledge than we think we need. As fresh novices, it's hard to even know when we are ready to hit the job. This conversation led to the question of natural talent and how this affects our productivity as programmers.&lt;/p&gt;
&lt;p&gt;Giftedness is both a dark topic and happy one. On the one hand, it is comforting to think that we might be able to master a skill faster than other people. Who wouldn't want to be gifted, in one area or another? On the other hand, it is uncomfortable to consider the reality that at least a few other people have an advantage over us - and that they will always be better than us at what we do.&lt;/p&gt;
&lt;p&gt;This conflict is at the root of the debate about giftedness. Nature VS nurture is another classic example of a debate along the same lines. We don't want to face the fact that other people are better than us just because they won the genetic lottery; at the same time, we want to believe their are shortcuts to learning a new skill.&lt;/p&gt;
&lt;p&gt;Programming, like any other skill, divides people into various levels of capability. Given the same amount of effort in any skill, each of us will achieve unique and often radically different accomplishments.&lt;/p&gt;
&lt;p&gt;As a beginner, I was able to spot the truly outstanding developers in a room. What I didn't think about is how much their genes, health, upbringing, and other factors impacted their skill level. Perhaps, I thought, they had just been programming for longer than other people.&lt;/p&gt;
&lt;p&gt;Quickly, I dismissed that possibility. Looking in other areas of my life, talent was everywhere. Success in sports is largely distinguished alongside body composition, and the strength of the strength of reflexes. Music is another example where natural skill affected one's ability to play.&lt;/p&gt;
&lt;p&gt;Soon, I paid more attention to what great programmers and why they had an upper hand. While obviously experience was one of the largest factors, I suspected that there was something more to it. After a few years, things became more clear.&lt;/p&gt;
&lt;p&gt;A gifted programmer doesn't necessarily produce more software or write more code than another programmer. In fact, one of their most important skills is talking people out of bad ideas before any code is ever written. That's why having a person like this on your team can have such a huge impact. If you often find yourself writing bad code as a consequence of the awful code base you are stuck with, take a look around. The great developers have already probably realized the management was bad left. Either that, or they are making a lot of money to stay and clean up somebody else's mess.&lt;/p&gt;
&lt;p&gt;Outstanding programmers choose the right tool for the job. They are not afraid of technology outside your team's core tool set. If you are lucky enough, one day you will end up on a project with nearly ideal architecture. This is likely the doing of somebody who actually knew what the hell was going on! Comparative skills are one of the primary signs of a great developer.&lt;/p&gt;
&lt;p&gt;Great programmers still get hung up on stupid problems. I have never seen an exception to this rule. Forgot the semicolon? You bet. Tracking down a typo in a variable name for two hours? Happens all the time.&lt;/p&gt;
&lt;p&gt;It isn't about the minute-by-minute productivity of a developer, either. Some programmers do best with just a few hours a day of focused work. In fact, this is true of almost all programmers. For a good part of the day, we're either distracting ourselves online, or we're tied up in meetings, estimates, and so on. There is no real way to write code for more than a few hours each day anyway. The human mind just doesn't focus for very long, especially when you start looking at variation in productivity across weeks and months at a time. (Side note - this is actually an area where we can often improve by optimizing brain function).&lt;/p&gt;
&lt;p&gt;Rather than how many hours we spend staring at our screen, what is actually important is how long the code we write lives in production without causing problems. The quality of an end product is the absolute indicator of skill as a programmer. Everything else is secondary, including your ability to communicate, the speed at which you debug, or how many hours you work each week. Spending 18 weeks on a project that lives for 2 years is better than spending 6 weeks on a project that lasts 1 year - even though it took three times as long to do it.&lt;/p&gt;
&lt;p&gt;Finally, I want to mention that there is just a sense I feel when I meet gifted software engineers. Their conversations about topics like code, politics, project life cycle, and career decisions are more far more detailed and expansive than an average programmer.&lt;/p&gt;
&lt;p&gt;Obviously, we are not all gifted programmers, and that's OK. Well, it might not feel OK, but we have to remember that the average is the average - and each of us is most likely close to that mark. There is plenty of value even a poor programmer can contribute to projects. Handing off simpler tasks to team members allows the more skilled developers to focus on harder problems.&lt;/p&gt;
&lt;p&gt;It's also important to remember that with effort, we can all improve our skills over time. Sure, we can't hurdle the natural barrier - and we may even discover our own. Our relationships with our skills is complex and individual. Some of us lack motivation, and some of us dislike challenge. Some of us like to learn and expand. All of us burn out, and all of us experience the struggles of writing software, and all of us get paid.&lt;/p&gt;</summary><category term="Programming"></category><category term="Career"></category><category term="Psychology"></category></entry><entry><title>What Is Work-Life Balance?</title><link href="/what-is-work-life-balance.html" rel="alternate"></link><updated>2015-11-03T12:00:00+00:00</updated><author><name>Sheldon Kreger</name></author><id>tag:,2015-11-03:what-is-work-life-balance.html</id><summary type="html">&lt;p&gt;Work-life balance is much more than having time to yourself every evening. It's more than a 40 hour workweek, and it's more than taking a few weeks of vacation every year to see your family.&lt;/p&gt;
&lt;p&gt;While a simple harmony between work and other obligations is an honorable accomplishment in American society, true work-life balance is achieved only when the worker is capable of showing their highest levels of productivity at work, and simultaneously experiencing deep joy both on and off the job.&lt;/p&gt;
&lt;p&gt;In some cases, a worker's potential is optimized by a 40 hour work week. In other cases, it could be more, or less. But, it's not the number of hours on the job that actually matter. For example, an athlete can only train for a few hours per day - the rest of their time is spent on recovery and handling nutritional needs. All of these activities contribute to the performance of the athlete and their success in their sport.&lt;/p&gt;
&lt;p&gt;Like the rest of the body, the brain needs time to recover from activity. In American culture, people often believe that the longer the work, the more they will accomplish. This might be true if you job is shoveling dirt. However, you will still run into a limit, past which you cannot shovel any more dirt without hurting yourself.&lt;/p&gt;
&lt;p&gt;Intellectual work is a bit more tricky. It's easy to fool yourself into believing that you are getting more work done, when in reality, you are just fatiguing yourself and creating more work for other people. The underlying problem is that results are difficult to measure. This is especially true in computer programming. Unlike a pile of dirt, which has clear boundaries and can objectively seen as moved, software (for example) rarely has such an easily observable state. One mistake in architecture can lead to literally years of work, where everybody believes that things are being accomplished. Each feature of the program can be checked off the list, and we can feel good about what we finished during a particular workweek. However, underlying problems which make the code unmaintainable or unusable might eventually make this software obsolete - and all the work put into it will essentially be wasted. Furthermore, shifts in priorities by a business can make even perfect software completely meaningless. This analogy extends far beyond the software world.&lt;/p&gt;
&lt;p&gt;Individual fulfillment comes as a result of a long series of good decisions. The relationship between work-life balance and personal fulfillment is inseparable. The better a person feels, the higher the quality of their work will be. The higher quality work a person does, the better they feel.&lt;/p&gt;
&lt;p&gt;Today, we run on an endless treadmill of work. Most jobs don't have a clear starting and stopping point. And, when the stopping point is reached, there is usually another task to pick up after it. Because this cycle is endless, our attitude toward it is critical. Companies which promote the use of endless force to accomplish tasks rarely create quality products, and they never retain their employees.&lt;/p&gt;
&lt;p&gt;One of the things I have noticed about intellectual work in general is that the number of hours I spend working each week has no true correlation with the amount of accomplishments I achieve. I often write more valuable code in 1 hour of my workday than in the remaining 7. What is important, however, is how I feel when I begin to work. If I feel tired, hungry, or emotionally distracted, programming is almost impossible. The brain, like any other body part, must be primed for performance. It is very easy to neglect the brain. I often ignore the first signs of hunger because I want to continue working. A half hour later, I am incapable of thinking clearly, and eating becomes even more difficult. By the time I eat and my energy is restored, I have lost an hour or more of productivity when what I should have done is taken 15 minutes to get some food when my body was ready.&lt;/p&gt;
&lt;p&gt;The worst enemy of intellectual performance is stress. Unlike challenges, which are both manageable and enjoyable, stress is a chronic sensation of unhappiness. The more stress a person faces at their job, the less they will accomplish, because of the way stress impacts the brain. Stress causes the brain to stray away from critical thinking, moral reasoning, and problem solving. Instead, it forces the mind to become hyper-sensitive and reactionary - the 'fight or flight' response of corporate American workers is experienced as brain fog, frustration, anger, and impatience. Long term, excessive stress will inevitably lead to serious health problems like depression, insomnia, and high blood pressure - all of which have a negative impact on every minute of work a person does.&lt;/p&gt;
&lt;p&gt;The state of mind I am in before I work is the only consistent variable which correlates to my productivity at work. Therefore, achieving optimal brain performance is the end-all sign of true work-life balance. A truly successful career is only possible when brain performance is prioritized.&lt;/p&gt;</summary><category term="Programming"></category><category term="Career"></category></entry><entry><title>My Interest in Elixir</title><link href="/my-interest-in-elixir.html" rel="alternate"></link><updated>2015-11-01T14:00:00+00:00</updated><author><name>Sheldon Kreger</name></author><id>tag:,2015-11-01:my-interest-in-elixir.html</id><summary type="html">&lt;p&gt;Almost exactly a year ago, I published a blog post regarding my excitement about Scala. Today, I am writing about an even newer programming language called Elixir.&lt;/p&gt;
&lt;h3&gt;Motivation Part 1: Scala Seems Impossible&lt;/h3&gt;
&lt;p&gt;I am not one of those naturally gifted programmers who can pick up new syntax on the fly. I rely on the help of other people and internet searches to get the details about syntax. Anybody who works with Scala would know that this would be a huge problem for an independent learner, such as myself.&lt;/p&gt;
&lt;p&gt;This kind of problem has manifested in my life in many ways, including poor performance in math and chemistry classes. I often mix up my bank account and social security numbers. My math tests were always plagued with simple algebraic mistakes, like adding instead of subtracting, or mixing up variable values.
In contrast, I excel in conceptual understanding. I believe this is a result of not only natural giftedness (yes, I believe it is biological - let's leave that topic for another day), but also the places where I put focus as a teenager.&lt;/p&gt;
&lt;p&gt;As a teenager, I was active in high school debate. This continued through college, for a grand total of 7 years of organized, high intensity, and fast paced competition. The variety of topics which I learned about - and the handful I mastered - gave me a critical tool set which has affected me deeply.&lt;/p&gt;
&lt;p&gt;For me, this was the problem with Scala. Coming from PHP, I desperately need something which creates more conceptual engagement. Scala seemed more than promising in this sense. Its orientation around concurrency made me very excited. This provided nostalgia of the sexy work I did before being forced out of my research career, where I worked with graphics cards to perform fascinating calculations in parallel using CUDA.&lt;/p&gt;
&lt;p&gt;Furthermore, the functional paradigm offered a new way of looking at programming. This, I felt, was my gateway away from the dreaded "PHP developer" image which I have undoubtedly earned over the last several years. It seemed that by learning Scala, I would not only be able to engage my eager mind, but also overthrow the stigma of the fly-by-night CMS code monkey, who prefers shuffling arrays and cringes at the thought of threading.&lt;/p&gt;
&lt;p&gt;With this motivation pushing me forward, I plowed through two Coursera courses taught by none other than Oderski himself. The first introduced functional programming using Scala, and the other was focused on reactive systems using Akka.&lt;/p&gt;
&lt;p&gt;A few months later, I was armed with most of the conceptual understanding needed to implement concurrent systems. In fact, I had a lot of it laying around, back from the good old days of CUDA. So, I purchased a few books, chose a framework, and got started trying to build something simple.&lt;/p&gt;
&lt;p&gt;My idea was to use the Play! framework with a Scala backend and a Javascript front end. Rather than jump into mapreduce jobs, I figured it would be easier to implement something I knew well - a web site.&lt;/p&gt;
&lt;p&gt;I first suspected something was wrong when I realized I'd be writing a lot of Javascript for this project. I don't like Javascript. But, that's another story. The second problem was the admittedly excellent tool Activator.&lt;/p&gt;
&lt;p&gt;Activator is a way to download Scala code examples and templates and try them yourself. The community and a handful of companies contribute code and this is a good way to see something in the real world. This is a great idea, but the problem was that every example I looked at was extremely different. I figured choosing an MVC framework like Play! would provide some structure and allow me to leverage examples from different people. The reality was that each project was implemented very differently.&lt;/p&gt;
&lt;p&gt;An example will make this clear. In PHP / Drupal land, all websites use MySQL. There is a rigidly defined user object, which is created through a clear registration process, and has a very formal API for adding fields for your use case. A user will always have a userID, an email address, and a password - and Drupal gives that to you. If you want to track a user's first and last name, you add those as fields by implementing a very specific function. This will create the tables in your database and any other code that accesses the user object in the future will be able to see these new fields. Using internet searches, I was easily able to find the function and an example of how to implement it in a blog post.&lt;/p&gt;
&lt;p&gt;In contrast, the Play! framework had no formal guidelines for objects like users. You get to choose your own database, and define your own schema. While it is common to use one of the popular FORMs like Slick, not everybody does so.&lt;/p&gt;
&lt;p&gt;So here I am, in a new ecosystem, making tough decisions about tool sets and then digging through search results and Activator to puzzle out how to use each one. Everybody was using different combinations of tools, and everybody was using different versions. Therefore, the exact syntax I needed to perform a particular task was usually impossible to find.&lt;/p&gt;
&lt;p&gt;The word 'frustrating' does not describe how I felt after months of evenings, spinning my wheels like this. I knew exactly what I needed to do - such as create a schema to store user accounts in PostgreSQL. But, using Slick 2.1-whatever yielded no search results. In the meantime, the examples I did find were filled with seemingly endless syntactic 'tricks' and 'shortcuts' for doing things which I believe should be relatively simple. And, there was no good way to perform internet searches to learn about them.&lt;/p&gt;
&lt;p&gt;HAD I BEEN WORKING WITH AN EXPERIENCED SCALA DEVELOPER, THIS WOULD NOT HAVE BEEN A PROBLEM. Somebody who knows this stuff could give me a structured project to work with, and answer questions in seconds regarding syntax. In a matter of weeks, I would have achieved productivity in that project and had the ability to work my way outward. But, this just wasn't possible for me, working alone at home, during evenings.&lt;/p&gt;
&lt;p&gt;I almost forgot to mention one minor detail, which is the unavoidable blend of the Scala and Java ecosystems. To be successful in Scala, I also needed to learn Java. This didn't scare me much, but job listings I found consistently reminded me that even after learning Scala, I still had a lot of work to do.&lt;/p&gt;
&lt;h3&gt;Motivation Part 2: Listen to Those Who Are Smarter Than You&lt;/h3&gt;
&lt;p&gt;After several months of effort, I had nothing to add to my resume. I had nothing beyond trivial examples which had been expanded outward to perform a handful of simple tasks. Thank god, I never wrote a single line of JavaScript because I never got my backend system to do much.&lt;/p&gt;
&lt;p&gt;With each day, I grew wary. Was I actually that code monkey, doomed to shuffle arrays in PHP until I finally burned out and got a job flipping burgers?&lt;/p&gt;
&lt;p&gt;I knew this wasn't the whole story. Attending meetups, I started talking to people. Most of them didn't struggle the way I do with the syntax, but they did admit it was unusually difficult to learn. That problem aside, I started asking around about what kind of production systems were using Scala.&lt;/p&gt;
&lt;p&gt;To my surprise, there were very few people in my area (Portland OR) who had successfully ran any code on production. Everybody around here is still getting started. So, that helped explain the lack of internet search results. New tools are just harder to learn.&lt;/p&gt;
&lt;p&gt;On the other hand, I ended up meeting a few people who told me horror stories of their Scala projects. Teams I truly respected had built sophisticated backend systems using Scala and Akka, and were later forced to rewrite them using other tools. LinkedIn, whose Play! site I really looked up to, published a blog post announcing they were moving all their Play! code off Scala and back onto Java.&lt;/p&gt;
&lt;p&gt;One month in spring 2015 I found myself at the PDX Erlang meetup, after I had met a new friend who had presented at the PDX Data meetup. His presentation started to solidify what I was starting to suspect in the back of my mind: Perhaps the grass was not much greener on the Scala side of the fence. In his rambling comparison of Erlang and Scala (which I will not go into here), I started to get the feeling that I would yet again be learning a new tool from the ground up.&lt;/p&gt;
&lt;p&gt;Although I wasn't experienced enough to know why exactly, I knew from past experience to listen to the people who were smarter than me. Only later would I be able to articulate the real differences between Erlang/Elixir/BEAM and Java/Scala/JVM (something I will be presenting about next year).&lt;/p&gt;
&lt;h3&gt;Elixir&lt;/h3&gt;
&lt;p&gt;Initially, I was more than hesitant to throw away nearly a year of evening study just to gamble on some hot new tool. But, what did I have to lose? My Scala adventure had led only down an eternally forking path of syntactic confusion. My code didn't actually do anything.&lt;/p&gt;
&lt;p&gt;My buddy from the aforementioned meetups happens to also run an Elixir meetup. This one is hands on, where I knew I could get help with syntax where I needed it. I had already dove into functional concepts, so that wasn't a hurdle anymore. Erlang sounded great, but the Elixir meetup was my opportunity to get help and socialize here in Portland.&lt;/p&gt;
&lt;p&gt;After reading a fascinating paper comparing the JVM and BEAM, I knew that learning Erlang would at least be interesting.&lt;/p&gt;
&lt;p&gt;So, just two months ago, I picked up an Elixir book and started working through the examples. Today, I feel confident in my understanding of the primary data structures in Elixir. Furthermore, the syntax is easy for me to read. The code examples I find online almost always make sense to me right away. I can open up source code on GitHub and know which files to open. Often times, I can read the code in those files. Is this supposed to be exciting? Because I am thrilled.&lt;/p&gt;
&lt;p&gt;It is extremely refreshing to discover a language oriented around managing processes and facilitating concurrent execution. I feel like it's exactly what I was looking for. And, while I'm eager to dive into Erlang, Elixir has proven to be easy to read - which is a huge bonus for a person like me.&lt;/p&gt;</summary><category term="Programming"></category><category term="Career"></category></entry><entry><title>Noppoo Choc Mini Review</title><link href="/noppoo-choc-mini-review.html" rel="alternate"></link><updated>2015-10-16T14:00:00+00:00</updated><author><name>Sheldon Kreger</name></author><id>tag:,2015-10-16:noppoo-choc-mini-review.html</id><summary type="html">&lt;p&gt;The Noppoo Choc Mini is a mechanical keyboard. I scored a killer deal on Ebay and decided to pick it up.&lt;/p&gt;
&lt;h3&gt;Why I Bought It&lt;/h3&gt;
&lt;p&gt;In terms of size, it sits somewhere between a ten-key-less (TKL) and a 60%. I attend a lot of programming meetups, and therefore write a lot of code on my laptop. The problem is that I don't like my laptop keyboard, so I decided to find a portable replacement.&lt;/p&gt;
&lt;p&gt;The Choc Mini is slightly larger than what I was originally looking for, because it has a function row. The FC660M, on the other hand, has no function row and is therefore a bit smaller.&lt;/p&gt;
&lt;p&gt;I didn't go for a 60% keyboard like the Poker3 because they do not have arrow keys, and the function button to engage the layer for arrows is extremely un-ergonomic - downright painful to use in my opinion. I had one for a few weeks and sold it right away.&lt;/p&gt;
&lt;h3&gt;What I Like&lt;/h3&gt;
&lt;p&gt;The Choc Mini is extremely space efficient. There is no wasted space between keys. For example, the function keys sit exactly in line with the number keys, meaning there is no large gap between every few function keys like you see with most mechanical keyboards.&lt;/p&gt;
&lt;p&gt;My Choc Mini shipped with Cherry MX Blue switches. Enough said.&lt;/p&gt;
&lt;p&gt;Overall, the case feels sturdy. The keys are not ugly (aside from the spacebar with the logo). It feels sold to type on, but the weight of the keyboard is not too heavy. Since this is my portable setup, the weight is an important factor.&lt;/p&gt;
&lt;p&gt;Really, the best thing about the keyboard is the size.&lt;/p&gt;
&lt;h3&gt;What I Dislike&lt;/h3&gt;
&lt;p&gt;Two minor issues with this keyboard. First, the spacebar is an odd size (5.5) which means buying a standard keycap set is going to be incomplete. The spacebar simply won't fit. There is only one dealer who makes spacebars for this keyboard, and in only one profile. So the options are very limited.&lt;/p&gt;
&lt;p&gt;Second, the cord is not detachable. This means that sliding the keyboard in and out of my backpack is slightly more cumbersome. Bummer.&lt;/p&gt;
&lt;h3&gt;Mac Compaitibliy Issues&lt;/h3&gt;
&lt;p&gt;The keyboard does not work on OSX. It works fine on my Ubuntu Linux laptop. There are reports that you can use USB to PS2 and then a PS2 to USB adapter setup to solve the problem. I have not tried it yet.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;The Choc Mini is a great choice for a portable keyboard, if you demand arrow keys and perhaps the function row.&lt;/p&gt;</summary><category term="Programming"></category><category term="Mechanical Keyboards"></category></entry><entry><title>Hard Work is a Tool, Not a Goal</title><link href="/hard-work-is-a-tool-not-a-goal.html" rel="alternate"></link><updated>2015-03-22T12:00:00+00:00</updated><author><name>Sheldon Kreger</name></author><id>tag:,2015-03-22:hard-work-is-a-tool-not-a-goal.html</id><summary type="html">&lt;p&gt;At times, I feel as though I am stating the obvious. But, many people refuse to embrace the fundamental concepts which have lead to an authentic state of well being. It is a good place to be, and I would like more people to experience it.&lt;/p&gt;
&lt;p&gt;There is only one higher aim than attaining ideal health. This is because the quality of your health dictates the quality of the rest of your life. I will leave the most important accomplishment for another day.&lt;/p&gt;
&lt;p&gt;I have watched too many of my friends fall into a cycle of endless hard work. Worse yet, they think this is a good thing. Although there are many reasons why this is destructive, the primary problem is that overworking yourself for long periods of time always harms your health.&lt;/p&gt;
&lt;p&gt;The first and most fundamental restriction of your body and mind is your overall state of well being. If you are not decently healthy and well rested, you will not attain a state of well being. Everybody has experienced at least short term illness and knows that accomplishing goals while sick is very difficult. If the illness is serious enough, your entire existence will be dedicated to fighting it off. You will make no progress on any goal outside the biological drive to continue life.&lt;/p&gt;
&lt;p&gt;There are many levels of health. Most people are happy with the level of health they need to succeed in their jobs and relationships. This is why many people are satisfied living with sub-ideal health. Restrictions in range of motion may not affect your ability to work at a desk. However, when ignored long enough, most health problems will become worse, until they actually do manifest a restriction in your lifestyle. That loss of range of motion is a step down the path to chronic pain. Happiness is more difficult to achieve in a state of continuous pain.&lt;/p&gt;
&lt;p&gt;A sure sign that you are working too hard is experience of continuous fatigue. A sustained state of fatigue will devastate your health. An authentic state of well being is not possible within a state of continuous fatigue.&lt;/p&gt;
&lt;p&gt;I do not work long hours, except in very rare circumstances. I do not see any value in working long hours. It is not a reflection of work ethic. It is a a symptom of a deeply mis-shapen value system. Usually, it is corporate interests which are driving people to work longer hours. Give more of your soul to this machine of infinite extraction and you will eventually find yourself in a state of complete disarray.&lt;/p&gt;
&lt;p&gt;It would be easy to accuse me of being lazy. Personally, I do not care if you think I am lazy, because I know that I live in a state of well being and continuous growth - and that is much more valuable than your opinion. I am not going to bother explaining why I am not lazy, because that is also unimportant in comparison to the fact I stated above.&lt;/p&gt;
&lt;p&gt;Working hard is not a valuable goal. Achieving health and well being is. Hard work may, sometimes, be a useful tool while following this path.&lt;/p&gt;
&lt;p&gt;Skilled athletes understand that there is a strict restriction on their work capacity. Pushing past that work capacity causes injury, and therefore has a negative impact on their athletic performance. This is true both short term and long term. World class athletes are in tune with their body and understand how far to push to gain the response they need from their training. Pushing any harder than that is worse than a waste of time. It is harmful.&lt;/p&gt;
&lt;p&gt;In some cases, an athlete can benefit from pushing, pushing HARD. This is reserved for moments of performance and competition. In some work environments, there is an appropriate time to sacrifice your time and energy. However, like an athlete, we must remember that such pushing is not the goal. The goal is sustained performance and gradual improvement over a long and happy career. I repeat, the goal is not to work hard. The goal is to achieve well being and higher levels of mastery.&lt;/p&gt;
&lt;p&gt;The same is true in the workplace. There is nothing impressive to me about writing code for 50 hours per week. In fact, it deters me from wanting to work with you, because you have fallen into a trap. This trap is sucking the meaning from your life, it is harming your body, and it is not helping you write better software. The only thing it is helping is the bank account of the company you work for. It is not worth it.&lt;/p&gt;
&lt;p&gt;Obviously this concept applies outside the software world. Most industries in the current economy pretend to reward people who work harder than they should. This is nothing more than the ice cold extraction of value from your body and mind, fueling the fire of endless expansion which lives at the core of capitalism today.&lt;/p&gt;
&lt;p&gt;Every individual must decide where the boundaries of their work capacity lie. This is not about how much work you can do before you start making mistakes that cause more harm than good for your company. This is about how much work you can do while prioritizing your health and well being.&lt;/p&gt;
&lt;p&gt;There is no point in fighting the inner turmoil caused by overwork, unless you truly value the pockets of top corporate executives over your own well being. Remember, your health is more important than the relentless quest for profit. It is more important than the mass transfer of wealth to the upper class. It is more important than the unsustainable goal of endless expansion.&lt;/p&gt;</summary><category term="Health"></category></entry><entry><title>Bad Programming Week</title><link href="/bad-programming-week.html" rel="alternate"></link><updated>2015-03-15T12:00:00+00:00</updated><author><name>Sheldon Kreger</name></author><id>tag:,2015-03-15:bad-programming-week.html</id><summary type="html">&lt;p&gt;Occasionally, I have an entire workday where I get nothing done. Not a single deliverable item is checked off the list. Sometimes, it is because a task is hard and takes many days. In other cases, it is because I am unable to focus on my work.&lt;/p&gt;
&lt;p&gt;However, I have had entire weeks go by where nothing gets finished. And, not because there is challenge in the size of a task. But, simply because something was happening in my mind which prevented me from doing my job. I really dislike this feeling. But, there is no easy way to make it go away. This week, I felt it start to happen on Monday, and by Tuesday I knew something was wrong. I just could not see what it was.&lt;/p&gt;
&lt;p&gt;Identifying the cause of the slump can be difficult. However, if you can figure it out, then you might be able to address it and move back into a healthy mental space. In other cases, you may identify it, but it is too difficult to overcome. For example, if you are having problems in your personal life which are distracting you from your work. Or, if there is a tragedy and it makes your work feel meaningless, then you may not be able to put any real effort into your work.&lt;/p&gt;
&lt;p&gt;In those cases, I think it is best to take time off. If that is not possible, then you should at least tell your team what is going on. You do not need to share details, just let them know that your personal life is causing distraction and that you feel as though your productivity is going to take a major hit. If you are on a good team, they will understand this and find a way to accommodate you. The project will move forward, even with your temporary leave.&lt;/p&gt;
&lt;p&gt;If you cannot pinpoint what is causing your disability, then it might be best to just keep showing up and hoping for a better day ahead. As a programmer, one productive day can erase an entire week of slump.&lt;/p&gt;
&lt;p&gt;Remember, if you work on a good team, they will be supportive as long as you communicate what is going on. It will be up to you whether to keep showing up to work, and that is a decision you will need to make based on the circumstances. Do not let a temporary state of confusion bring you down more than it has to. Find a way to relax - even if it is only after work - and see if clearing your mind brings you back into the zone.&lt;/p&gt;</summary><category term="Programming"></category></entry><entry><title>Drupal for Prototyping</title><link href="/drupal-for-prototyping.html" rel="alternate"></link><updated>2014-12-19T12:00:00+00:00</updated><author><name>Sheldon Kreger</name></author><id>tag:,2014-12-19:drupal-for-prototyping.html</id><summary type="html">&lt;p&gt;I have spent the last few years working almost exclusively with Drupal 7. My current project has revealed many of the problems Drupal has with scalability in many regards, and as a result, I have set a lot of time aside to explore new frameworks as our team prepares to rebuild the site.&lt;/p&gt;
&lt;p&gt;While this post is not about the shortcomings of Drupal, I do want to mention that I no longer plan to make many more websites in Drupal 7. That brings me to the real topic at hand: Drupal 7 is still a great choice for rapid prototyping.&lt;/p&gt;
&lt;p&gt;Once a site builder masters the basics of Drupal - getting the LAMP stack up, building content types, and building views - then it is very easy to put together the basic outline of a website very quickly. I can launch a D7 development site using Vagrant in a matter of minutes. I can build out content types and create lists of content in a few short hours. At this point, it does not even require any deep thinking on my part. I have done it enough times that it happens naturally.&lt;/p&gt;
&lt;p&gt;Such a prototype will have many shortcomings. It will not do exactly what you and your client want it to do. It will be unthemed. It will be ugly. But, if your site is relatively simple, it will display the basic functionality with very little investment. From this, your clients will have something to poke at and provide feedback. This will give you the chance to sort out major architectural decisions BEFORE you have invested a lot of time into building the real thing - and that is a BIG DEAL.&lt;/p&gt;
&lt;p&gt;And, from there, you can build out your production system in any framework you choose. Even if it is going to be Drupal 7, you can build the prototype before you put in lots of work for custom rules, displays like panels, export your features, configuring your cache, and so on. Giving your stakeholders something to click on is a big confidence boost for both you and the client - it will give them a more concrete way to express their needs before you ever commit to foundation-level architectural decisions. Big win!&lt;/p&gt;</summary><category term="Programming"></category><category term="Drupal"></category></entry><entry><title>Signs it is Time to Refactor</title><link href="/signs-it-is-time-to-refactor.html" rel="alternate"></link><updated>2014-12-11T11:00:00+00:00</updated><author><name>Sheldon Kreger</name></author><id>tag:,2014-12-11:signs-it-is-time-to-refactor.html</id><summary type="html">&lt;p&gt;Software systems are expensive. After building a big application, one might hope there is a reasonable lifetime for it to live in the wild before it needs to be replaced. I have worked on sites that were implemented successfully and will have a lifetime of many years. But, especially on large systems, such success is rare. Frequently, we find ourselves reworking our code, starting the minute the initial build is finished.&lt;/p&gt;
&lt;p&gt;Contrary to my initial impression, this is not necessarily a bad thing. Reading from and speaking with highly experienced programmers has taught me that many projects never actually "finish", they just continue to be rebuilt as time passes. This is not because the developers did not know what they were doing, but because this is often the best practice in the software industry today.&lt;/p&gt;
&lt;p&gt;Here are some common reasons why it may be time to refactor or rebuild an application.&lt;/p&gt;
&lt;h2&gt;1. Changing Requirements&lt;/h2&gt;
&lt;p&gt;Oftentimes, the requirements for a project expand or change while the software is being developed. And, almost always, the requirements also change after the project is finished. Once requirements change dramatically, it may make sense to rebuild an application from the ground up using different tools, languages, and frameworks.&lt;/p&gt;
&lt;h2&gt;2. You Have Reached the Point of No Return&lt;/h2&gt;
&lt;p&gt;If you have reached a point where adding more developers to your team no longer results in more work getting done, then it is time to rebuild. If you cannot get any benefit from adding team members, then you have outgrown your softare and it is time to move on.&lt;/p&gt;
&lt;h2&gt;3. Endless Performance Issues&lt;/h2&gt;
&lt;p&gt;If you spend a lot of time trying to enhance performance in your application, yet it continues to become slower and slower, it is time to rebuild. There is no reason to waste time putting more lipstick on your pig.&lt;/p&gt;
&lt;h2&gt;4. Overriding Core Technology&lt;/h2&gt;
&lt;p&gt;If you rely on a fundamental piece of technology which you have used to build your application, but you have to continuously override its normal behavior, then it is time to rebuild. The further you stray from what the technology is supposed to actually do, the harder it will be to work on your application. Software updates which should be quick and easy will become time consuming or even impossible - and that could include security updates that need to go live fast. If your requirements are
no longer in alignment with your core technology, do yourself a favor and move on.&lt;/p&gt;
&lt;h2&gt;5. Bug Reports Coming In Faster Than You Can Fix Them&lt;/h2&gt;
&lt;p&gt;If your software is so buggy that you cannot keep up with all the new issues coming in, it may be time to rebuild. However, newly launched products may experience this kind of problem for some time after the initial deployment, so do not panic early.&lt;/p&gt;
&lt;h2&gt;6. All Your Developers Keep Quitting&lt;/h2&gt;
&lt;p&gt;If you have problems retaining talent on your team, there are likely two issues: Mismanagement of the project requirements and frustration with existing infrastructure will force programmers to walk away. If you keep hiring people and they leave within a short period of time, there is a good chance that your underlying technology is mismatched with the requirements of the project. The developer can see this after a few months, and if they do not see any sign of change, they will probably just find another
job.&lt;/p&gt;
&lt;h2&gt;7. Outdated Technology&lt;/h2&gt;
&lt;p&gt;Finally - and this is pretty obvious - if your underlying software system is losing support in terms of technical updates (especially security updates), then it is time to rebuild.&lt;/p&gt;</summary><category term="Programming"></category></entry><entry><title>My Interest in Scala</title><link href="/my-interest-in-scala.html" rel="alternate"></link><updated>2014-11-29T14:00:00+00:00</updated><author><name>Sheldon Kreger</name></author><id>tag:,2014-11-29:my-interest-in-scala.html</id><summary type="html">&lt;p&gt;As you may know, despite a breif academic background in high performance computing, I have spent the last few years working almost exclusively with the content management system Drupal, building and maintaing websites for both small nonprofits and large corporations. Most of my work has been in managing application configuration through user interfaces, or building custom functionality with PHP (I have also worked with front end languages like CSS and SCSS).&lt;/p&gt;
&lt;p&gt;Today, Drupal is hotter than ever, with a bright future in Drupal 8.&lt;/p&gt;
&lt;p&gt;So, why am I so fascinated by Scala, when it has no immediate applications to my day job? There are two overarching reasons, practical and intellectual.&lt;/p&gt;
&lt;p&gt;From a practical perspective, I see too many shortcomings with the current system I work with to be comfortable continuing to invest much time into it.&lt;/p&gt;
&lt;p&gt;Working at Intel, on an enterprise sized application, my perspective has grown tremendously. Scalability has become a tremendous problem for our team. And, our team is not just developers - we serve a much larger group of people who add content to site (web ops), collect data on site usage (business intelligence), and leaders for ongoing and new projects (management, marketing). Each of these teams has unique needs, and a monolithic PHP application is, frankly, serving them poorly -
despite the best efforts of our team.&lt;/p&gt;
&lt;p&gt;While it may be possible to use PHP in a more robust architecture (a topic for another day), it still does not resolve my intellectual desires. In fact, there is a good chance my team will do just this - which is totally OK!&lt;/p&gt;
&lt;p&gt;Frankly, I do not want to be limited to one single knowledge base, one conceptual framework, one programming language. I want to know more about different software systems, how they are implemented, and why. I do not want to be known as just a PHP developer - I want to be a web engineer with extensive PHP experience, plus XYZ. The best developers I have met can coompare and contrast many frameworks and their practicality for a given application. I want to be able to do that.&lt;/p&gt;
&lt;p&gt;Although I have no desire to return to college (yet another topic for another day), I do have a desire to learn and expand my skills. The best way to do that is to step outside my comfort zone and take on something new and exciting.&lt;/p&gt;
&lt;p&gt;Enter Scala. It is pretty much the opposite of PHP - functional, compiled, and practical for things outside web. It is not easy to just pick up and run with - the syntax is unfamiliar, and pretty much unintelligible unless the programmer has an underlying conceptual understanding of functional programming. And, I have yet to see a single line of asynchronous PHP code (although I have heard it exists at Facebook as HipHop).&lt;/p&gt;
&lt;p&gt;I figured Scala was a big jump - but not too big. Since I am familiar with parallel processing, understanding futures, promises, streams, actors, and mapping has been relatively easy. But, they were all terms I had never heard before studying functional programming and reactive programming on Coursera.&lt;/p&gt;
&lt;p&gt;Scala is used in a variety of applications. Web applications in Scala use an MVC framework called Play. And, while I had never heard of play, I knew about MVC frameworks, and the basic architecture of web applications. So, learning about Play has served as a good bridge for learning Scala.&lt;/p&gt;
&lt;p&gt;Outside web, my primary interest is data science, specifically  predictive analytics. My most exciting programming  project to date is a content recommendation engine we built with Python, Neo4j, and Cypher. Again . . . not Scala. But, learning about functional programming through Scala has opened up a whole new world of possibilities in content recommendation. For example, I had never thought of my Cypher queries as operations on an immutable graph . . . but they are. Executing queries
in parallel was difficult to conceptualize in the larger picture of an application written in Python. Without futures, streams, and observables, there is not any good way to perform calculations and also handle incoming data. We simply updated the data daily, from a single source. Now, I now how to write an application which could handle data from multiple sources, being updated in short intervals (or even real time), and write them to handle failure, perform calculations in parallel, and
share data to multiple applications simultaneously.&lt;/p&gt;
&lt;p&gt;I always compare programming to mathematics. Whether you know it or not, you are surrounded by problems which can only be solved with specific tools. But, you cannot see the problems at all, until you have been taught how to solve them. By making a big jump to a functional language geared toward high performance, threaded, and service-oriented applications, I have started to see my programming problems in a new and exciting way. Scala is awesome.&lt;/p&gt;</summary><category term="Programming"></category><category term="Career"></category></entry><entry><title>Why I Still Read Programming Books</title><link href="/why-i-still-read-programming-books.html" rel="alternate"></link><updated>2014-11-27T19:00:00+00:00</updated><author><name>Sheldon Kreger</name></author><id>tag:,2014-11-27:why-i-still-read-programming-books.html</id><summary type="html">&lt;p&gt;With such an abundance of online material, why do I continue to read programming books? After all, online content is usually free; and buying books is expensive.&lt;/p&gt;
&lt;p&gt;I read programming books because I believe they offer a large-picture perspective on the topic at hand. Books usually cover the full application lifecycle, from planning to production. For books which are not about an application or framework (such as a book about a programming language), I enjoy the thorough and organized coverage.&lt;/p&gt;
&lt;p&gt;Often times, as programmers, we simply need to look up syntax we do not remember. This is usually faster online. However, if we are looking for information about a specific function and its use cases, a good technical book is not a bad place to start. Often, they will include more detail or have more thorough examples than you will find in official documentation online. The function will likely be explained in the context of a larger example - and you could see a new idea you never expected.&lt;/p&gt;
&lt;p&gt;One of the problems with looking for everything online is that very few blog posts are comprehensive. They cover a very specific technical problem as briefly as possible. In a book, you can see where a problem is organized in context of other topics. Books tend to be both longer and more rigorous than blog posts.&lt;/p&gt;
&lt;p&gt;Books are almost always written by programming experts. A person (or group of people) who can write an entire book on a programming topic definitely know what they are doing. It is also possible to find great authors online, but more often than not, you will not have any idea whose blog you are reading.&lt;/p&gt;
&lt;p&gt;Books are most advantageous when learning a new skill or topic from scratch. I have recently been learning functional programming using Scala. What I really need before I can learn all the little details (I can find those on Stack Overflow) is an understanding of the computer science aspect of functional programming, why that is beneficial for particular kinds of applications, and the architecture of applications using Scala. Until I see the big picture, the details do not have any
meaning to me, and I will not remember or even make much sense of them.&lt;/p&gt;
&lt;p&gt;Online searches are a strong choice when you encounter a bug (Stack Exchange) or when you really just need syntax - NOT an explanation of an implementation.&lt;/p&gt;</summary><category term="Career"></category><category term="Programming"></category></entry><entry><title>The Purpose of Technology</title><link href="/the-purpose-of-technology.html" rel="alternate"></link><updated>2014-11-26T19:00:00+00:00</updated><author><name>Sheldon Kreger</name></author><id>tag:,2014-11-26:the-purpose-of-technology.html</id><summary type="html">&lt;p&gt;Each day, millions of people spend 8 or more hours attempting to improve the technology they sell or use. Technology impacts many aspects of life, from entertainment to warfare. At times, I see the products which are being produced, and I feel as though the essence of technology has been forgotten. Unfortunately, I do not think that most engineers take time to consider the reasons why people demand the technology we make, or how technology impacts culture as a whole.&lt;/p&gt;
&lt;p&gt;In fact, the question of the purpose of technology is discussed in more depth by social scientists and critical theorists than by the people who actually build things. It is remarkable how little interest this conversation inspires among the engineers I have met.&lt;/p&gt;
&lt;p&gt;At this point in time, I have not taken a chance to study the topic in any detail - at all. Today, I am speaking strictly from the gut-feeling I have in regard to the question.&lt;/p&gt;
&lt;p&gt;I like to believe that the ideal purpose of technology is to enhance the lives of all conscious beings. This ranges from simplifying daily tasks to improving transportation, or providing solutions to illness.&lt;/p&gt;
&lt;p&gt;It is obvious today that technology is often used for tasks which do not support the ideal purpose I came up with.&lt;/p&gt;
&lt;p&gt;I am not sure that, even if there were a wider discussion of the purpose of technology among engineers, if there would be any significant change. The fact is that, in many cases, negative ideologies actively give motivation to people to build machines which harm the planet or even other people. Although technology helps shape the future, it is ideologies which decide the techonology we invest in.&lt;/p&gt;</summary><category term="Science and Technology"></category></entry><entry><title>Site Rebuild in Pelican</title><link href="/site-rebuild-in-pelican.html" rel="alternate"></link><updated>2014-11-26T18:00:00+00:00</updated><author><name>Sheldon Kreger</name></author><id>tag:,2014-11-26:site-rebuild-in-pelican.html</id><summary type="html">&lt;p&gt;I chose to rebuild sheldonkreger.com using the Python-based static HTML generator Pelican. I admit I wanted to use MonkeyMan, but it is not supported very well.&lt;/p&gt;
&lt;p&gt;While there are many great static HTML generators out there, I chose Pelican because it is widely supported, and I already know how to use PIP. But, why choose a static HTML generator over a CMS like Drupal - which, after all, is my area of experise?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CMS systems are harder to theme.&lt;/li&gt;
&lt;li&gt;The site is simple and I do not need any special functionality.&lt;/li&gt;
&lt;li&gt;Static HTML sites are very fast (espeically on GitHub Pages, using their CDN for free)!&lt;/li&gt;
&lt;li&gt;I wanted to try something new.&lt;/li&gt;
&lt;li&gt;Most importantly - deployments with git push.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It only took about 10 hours to put the whole thing together - and most of that time was spent fighting DNS and URL redirect settings from the previous site.&lt;/p&gt;
&lt;p&gt;If you are setting up a simple blog, I highly suggest a static HTML generator due to their simplicity.&lt;/p&gt;</summary></entry></feed>